from Crypto.Util.number import long_to_bytes
n = 114451512782061350994183549689132403225242966062482357218929786202609314635625168402975465116960672539381904935689924074978793017604108838426275397024126351435336388859375577638687615733448645699186377194544704879027804400841223407182597828299190404980916587708863068950664207317360099871904794302327240026597
e = 0x10001
c = 77973874950946982309998238055233832655056168217930252243355819182449120246116674359138553216317477143768434108918799869104308920311195408379262816485377057853246446992573203590942762693635615621774057306679349618708293741847308966437868706668452083656318895155238523224237514077565164105837790895618179891869
s1 =  21400959789031198835597502268226110838410793429486235013163818172148759394109297013195530163943463063090162742198192075506990494863858727035693527345539878
s2 =  441620610348849769847261104024471204541391170160225757260110727514761526074769013762749528928112909396341014808517549368576708910310103233373547986477636

def phi(n):
    result = n   # khởi tạo kết quả với giá trị ban đầu là n
    p = 2
    while p * p <= n:
        if n % p == 0:  # n chia hết cho p
            while n % p == 0:
                n /= p
            result -= result // p  # cập nhật kết quả
        p += 1
    if n > 1:  # nếu n còn lại thì nó là một số nguyên tố khác
        result -= result // n  # cập nhật kết quả
    return result

p = (s1)/2 + (s2)/2
q = (s1)/2 + (s2)/2
phi(n) = (p-1) * (q-1)
d = pow(e, -1, phi(n))
m = pow(c, d, n)

flag = long_to_bytes(m)
print(flag.decode())